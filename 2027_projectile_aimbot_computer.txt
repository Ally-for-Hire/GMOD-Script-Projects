--@name 2027 Projectile Aimbot Computer
--@author Ally for Hire / Merydian9
--@shared
--@server

--- Opening Blurb
-- *This is assuming target on a level plane, but at close-range it honestly shouldn't matter excessively
-- *This ends up working remarkebly well on targets even far away with elevation distances, however it struggles
-- *with fast moving targets for some reason. The math doesn't support that happening so it's kinda shrug from me.
-- *With 1.6 being the final version this solution should be about as optimized and accurate as it's ever going to
-- *get. If you're reading this and understand where i fucked up if i did, 
-- *reach out at AllyFH.

--- Version 1.1
-- Comments added
-- Slight code cleanup
-- Option to fire added
-- Fixed an issue with data table logic
--    > Stopped modifying first data point, added additional data point at start
-- Fixed an issue with firing logic
--    > Added check for invalid TargetPos
-- Fixed an issue with acceleration logic
--    > Ignored overlapping data and updated stored LastVel variable

--- Version 1.2
-- Cleaned up variables and code further
-- Added further comments
-- Fixed acceleration handling issue introduced by 1.1
--    > A misstype made acceleration ignored

--- Version 1.3
-- Cleaned up code even more
-- Fixed fuze default case
--    > Made it -1 instead of 0
-- Accounted for muzzle distance in calculations
-- Improved accuracy sligtly
--    > Returned a more accurate time
--    > Made TIME_STEP more refined
-- Added a default 0.01 offset on AimPos

--- Version 1.4
-- Removed the refinement of TIME_STEP
-- Fixed handling of fuze time with offset

--- Version 1.5
-- Stored acceleration and updated its handling
-- Added a variable for the pitch numerator
-- Fixed radian conversion
-- Improved debug printout
-- Added clamp on pitch step
-- Removed default 0.01 offset
-- Renamed acceleration variable to be more accurate
-- Properly factored velocity in AimPos output
--    > Now correctly uses relVel instead of targetVel
-- Improved optimization significantly
--    > Lowered MAX_TIME
--    > Improved endpoint for data table generation
--    > Removed extraneous simulation
-- Improved accuracy
--    > Refined TIME_STEP
--    > Refined pitchNumerator

--- Version 1.5.1
-- Fixed the acfFire function for use with ACF3
-- *Considering having it output the max range of a no-drag solution, and then using that for optimization purposes
-- Hotfix: offset removal

--- Version 1.5.2
-- Hotfix: Fixed acfFire function for use with ACE
-- *Considering having a way to detect later

--- Version 1.6
-- Slight optimization increases
--    > Only does math when target is within range
--    > Only attempts to fire when gun is ready
--    > Made binary search start more refined
-- Added a delay to firing for accuracy with single-shot fuzed weapons
-- Fixed bug involving the handling of targetValue before calculations are ran
-- *This is probably as good as this is going to get as is honestly
-- Updated wording for comments

--- Version 1.6.1
-- Super tiny update to account for correct muzzle distance

--- Version 1.7
-- Used dot products instead of the bs i was doing before
-- Changed first data point from 0 to muzzledist
-- Added interpolation clamping
-- Added minimum time to binary search of 0.01
-- Skips math when we area too close and uses the minimum time
-- Added variables for output
-- Introduced TICK constant and added it to the time output by default
-- Improved firing logic to only fire when the gun is aiming at target

--- Version 1.7.1
-- Cleaned up unused code
-- Fixed our friend that I actually forgot to do
--    > Fixed first data point to actually be muzzledist

--- User Variables
local offset = 0.0 -- Time offset in seconds, 0.02 is about 1 tick ish
local handleFiring = true -- Whether or not the starfall will fire the gun automatically
local firingRange = 60000 -- Range the projectile will be at when it gets intercepted if handleFiring is true
local firingAccuracy = 0.5 -- Distance between the target and where the gun is aiming in meters

--- Do not touch below this

--- Constants
local MAX_TIME = 2
local TIME_STEP = game.getTickInterval() / 10
local GRAVITY = Vector2(0, physenv.getGravity()[3])
local RAD_CONV = math.pi / 180
local TICK = game.getTickInterval()

--- Wire Stand-in Variables 
local gun = nil
local targetPos = nil
local targetVel = nil
local targetAccel = nil
local lastVel = Vector()
local lastFrame = 0

--- Internal Variables
local initialized = false
local storedMuzzleVel = 0
local maxCalculatedRange = 0
local pitchStep = 0
local dataTable = {}
local muzzleDist = 0
local relativeAccel = Vector(0)
local pitchNumerator = 6
local attemptingFire = false

--- Simple interpolation
-- Table in and ideal time in, interpolated time out
local function interpolateTable(tbl, targetTime)
    -- Clamp if targetTime is outside the bounds
    if targetTime <= tbl[1][3] then return tbl[1][1] end
    if targetTime >= tbl[#tbl][3] then return tbl[#tbl][1] end

    for i = 1, #tbl - 1 do
        local t0, t1 = tbl[i][3], tbl[i + 1][3]
        if targetTime >= t0 and targetTime <= t1 then
            local d0, d1 = tbl[i][1], tbl[i + 1][1]
            local alpha = (targetTime - t0) / (t1 - t0)
            return d0 + (d1 - d0) * alpha
        end
    end

    -- Should never reach here due to clamping, but just in case:
    return tbl[#tbl][1]
end

--- Generates the ballistics of the shell at the given pitch
-- Pretty simple function, just generates until the elevation is 0
local function generateAngleBallistics(gun, pitch, dt)
    -- Initialization of variables
    local curtime = 0
    local indices = 0
    local dragCoef = gun:acfDragCoef()
    
    -- Calculating the starting position of the shell
    local attachmentInfo = gun:getAttachment(gun:lookupAttachment("muzzle"))
    local muzzlePos = Vector(attachmentInfo[1], attachmentInfo[2], attachmentInfo[3])
    muzzleDist = gun:localToWorld(Vector()):getDistance(muzzlePos)
    
    -- Calculating the starting velocity of the shell
    local muzzleVel = gun:acfMuzzleVel() * 39.37
    
    local shellPos = Vector2(math.cos(pitch), math.sin(pitch)) * muzzleDist 
    local shellVel = Vector2(math.cos(pitch), math.sin(pitch)) * muzzleVel
    
    -- Generic bullet sim from ACE code
    while curtime < MAX_TIME and shellVel[1] > 0 do
        local drag = (dragCoef * shellVel:getLength()^2) / 40
        drag = shellVel:getNormalized() * (drag * dt)
        drag = Vector2(drag[1], drag[2]) * 39.37
        
        shellPos = shellPos + shellVel * dt
        shellVel = shellVel + (GRAVITY * dt) - drag
                
        curtime = curtime + dt
        indices = indices + 1
        
        --outputTable[indices] = {shellPos, shellVel, curtime, math.sqrt(shellPos[1]^2 + shellPos[2]^2)} -- 2D Position, 2D Velocity, Current Time, Distance from Start
        -- We can stop once we hit the threshold we are looking for
        if shellPos[2] < 0 then
            curtime = curtime - dt / 2
            break
        end
    end
    
    return {shellPos[1], shellPos[2], curtime}
end

--- Attempts to generate values so we can get this show on the road
local function generateValues()
    -- Extensive list of early-outs
    if gun == nil or not gun:isValid() or gun:getClass() != "acf_gun" or gun:acfMuzzleVel() == storedMuzzleVel then return end
    
    -- Variable decleration and cleanup
    storedMuzzleVel = gun:acfMuzzleVel()
    pitchStep = math.clamp(pitchNumerator / storedMuzzleVel, 0.002, 0.1) -- [NUM] / Muzzle Vel is the pitch step in degrees. Higher number means less steps so less accuracy, but also less lag. The vice versa is also true. 4 is the default
    gun:acfFire(0)
    
    -- Make a table of every point at which the bullet intersects z=0 of the gun
    local pitch = 0
    local attachmentInfo = gun:getAttachment(gun:lookupAttachment("muzzle"))
    local muzzlePos = Vector(attachmentInfo[1], attachmentInfo[2], attachmentInfo[3])
    local data = {gun:localToWorld(Vector()):getDistance(muzzlePos), 0, 0}
    dataTable[1] = data
    local indices = 2
    while data[3] < MAX_TIME and pitch < 5 do
        data = generateAngleBallistics(gun, pitch * RAD_CONV, TIME_STEP)
        dataTable[indices] = data
        pitch = pitch + pitchStep
        
        indices = indices + 1
    end
    
    -- Store the maximum data so we can early-out later
    maxCalculatedRange = dataTable[indices - 1][1]
    initialized = true
    
    print("Max Effective Range .. " .. math.round(maxCalculatedRange, 2))
    --printTable(dataTable)
end

--- Time to actually do the math and logic
local function main()
    -- Short list of early-outs this time
    if not initialized then return end
    if targetPos == nil or targetVel == nil or targetPos == Vector(0, 0, 0) then return end
    
    if handleFiring then gun:acfFire(0) end
    
    -- Simple acceleration handling via calculating change in velocity over dt
    local relativeAccel = -Vector(0, 0, GRAVITY[2])
    if lastVel != targetVel then
        local dt = timer.curtime() - lastFrame
        
        relativeAccel = relativeAccel + (targetVel - lastVel) / dt
        
        lastVel = targetVel
        lastFrame = timer.curtime()
    end
    
    -- Preparing variables for use with our equations
    local relativePos = targetPos - gun:getPos()
    local relativeVel = targetVel - gun:getVelocity()
    local low = 0.01
    local time = low
    local high = (relativePos):getLength() / (storedMuzzleVel * 39.37)

    -- Use equations of motion to solve the interception point between our two projectiles regardless of exact motion
    local predictedTargetPos = relativePos
    local targetValue = predictedTargetPos:getLength() - muzzleDist
    local selfValue = 0 -- this fucker is why any of this is so hard
    
    -- Simple binary search to find the solution to those equations
    while (high - low) > 0.001 and targetValue < firingRange * 1.5 and targetValue > storedMuzzleVel do
        time = (low + high) / 2
        
        -- Predict target position with acceleration applied
        predictedTargetPos = relativePos + relativeVel * time + 1/2 * relativeAccel * time^2
        targetValue = predictedTargetPos:getLength() - muzzleDist
        selfValue = interpolateTable(dataTable, time)
        
        if targetValue > maxCalculatedRange then
            return -1    
        end
        
        -- Make sure we stop if we go past the target or if the target goes past us
        if targetValue > selfValue and predictedTargetPos:dot(relativePos) > 0 then
            low = time
        else
            high = time
        end           
    end

    -- Wire outputs
    local timeOutput = time + TICK
    local aimposOutput = targetPos + relativeVel * (timeOutput + offset) + 0.5 * relativeAccel * (timeOutput + offset)^2
    wire.ports.Time = timeOutput
    wire.ports.AimPos = aimposOutput
    
    -- Gun fire handling
    if handleFiring and targetValue < firingRange and gun:acfReady() then
        -- Barrel alignment check
        local muzzle = gun:getAttachment(gun:lookupAttachment("muzzle"))
        local muzzleVec = Vector(muzzle[1], muzzle[2], muzzle[3])
        local gunFwd = gun:getForward()
        local toAim = aimposOutput - muzzleVec
        local proj = gunFwd * toAim:dot(gunFwd)
        local closest = muzzleVec + proj
        local error = (aimposOutput - closest):getLength()
        
        if error < firingAccuracy then
            gun:acfFire(1)
        end
    end
    
    -- Acceleration resetting
    timer.create("Reset Acceleration", 0.3, 1, function() lastVel = Vector() end)
end

--- Updates variables with their respective values when needed
-- Also attempts logic when possible
local function handleWire(name, value)
    if name == "Gun" then
        gun = value
        generateValues()
    elseif name == "TargetPos" then
        targetPos = value    
    elseif name == "TargetVel" then
        targetVel = value    
    end
end

--- Need to retry in-case the ballistics change, just in case
-- Try to update the logic every 1s
timer.create("retry", 0.1, 0, function()
    generateValues()
    
    if gun:isValid() and gun:acfMuzzleVel() == 0 then
        gun:acfFire(1)
    elseif gun:isValid() then
        gun:acfFire(0)
    end
end)

--- Hook for when the wire inputs are updated
-- This is basically the only hook we need since we only care when we are actually recieving data
wire.adjustPorts({Gun = "entity", TargetPos = "vector", TargetVel = "vector"},{Time = "number", AimPos = "vector"})
hook.add("input", "Wire Inputs Updated", handleWire)

--- Main think hook, pretty self explanatory
hook.add("think", "Main Think", main)
